// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserCredentials is an autogenerated mock type for the UserCredentials type
type UserCredentials struct {
	mock.Mock
}

type UserCredentials_Expecter struct {
	mock *mock.Mock
}

func (_m *UserCredentials) EXPECT() *UserCredentials_Expecter {
	return &UserCredentials_Expecter{mock: &_m.Mock}
}

// GetSaltAndHash provides a mock function with given fields: ctx, username
func (_m *UserCredentials) GetSaltAndHash(ctx context.Context, username string) (string, string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetSaltAndHash")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserCredentials_GetSaltAndHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSaltAndHash'
type UserCredentials_GetSaltAndHash_Call struct {
	*mock.Call
}

// GetSaltAndHash is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserCredentials_Expecter) GetSaltAndHash(ctx interface{}, username interface{}) *UserCredentials_GetSaltAndHash_Call {
	return &UserCredentials_GetSaltAndHash_Call{Call: _e.mock.On("GetSaltAndHash", ctx, username)}
}

func (_c *UserCredentials_GetSaltAndHash_Call) Run(run func(ctx context.Context, username string)) *UserCredentials_GetSaltAndHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserCredentials_GetSaltAndHash_Call) Return(salt string, hash string, err error) *UserCredentials_GetSaltAndHash_Call {
	_c.Call.Return(salt, hash, err)
	return _c
}

func (_c *UserCredentials_GetSaltAndHash_Call) RunAndReturn(run func(context.Context, string) (string, string, error)) *UserCredentials_GetSaltAndHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields: ctx, username
func (_m *UserCredentials) GetUserID(ctx context.Context, username string) (int64, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCredentials_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type UserCredentials_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserCredentials_Expecter) GetUserID(ctx interface{}, username interface{}) *UserCredentials_GetUserID_Call {
	return &UserCredentials_GetUserID_Call{Call: _e.mock.On("GetUserID", ctx, username)}
}

func (_c *UserCredentials_GetUserID_Call) Run(run func(ctx context.Context, username string)) *UserCredentials_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserCredentials_GetUserID_Call) Return(_a0 int64, _a1 error) *UserCredentials_GetUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserCredentials_GetUserID_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *UserCredentials_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function with given fields: ctx, userId
func (_m *UserCredentials) GetUserInfo(ctx context.Context, userId int) (string, string, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, string, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) string); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserCredentials_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type UserCredentials_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int
func (_e *UserCredentials_Expecter) GetUserInfo(ctx interface{}, userId interface{}) *UserCredentials_GetUserInfo_Call {
	return &UserCredentials_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, userId)}
}

func (_c *UserCredentials_GetUserInfo_Call) Run(run func(ctx context.Context, userId int)) *UserCredentials_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *UserCredentials_GetUserInfo_Call) Return(username string, email string, err error) *UserCredentials_GetUserInfo_Call {
	_c.Call.Return(username, email, err)
	return _c
}

func (_c *UserCredentials_GetUserInfo_Call) RunAndReturn(run func(context.Context, int) (string, string, error)) *UserCredentials_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HasEmailOrUsername provides a mock function with given fields: ctx, username, email
func (_m *UserCredentials) HasEmailOrUsername(ctx context.Context, username string, email string) (bool, error) {
	ret := _m.Called(ctx, username, email)

	if len(ret) == 0 {
		panic("no return value specified for HasEmailOrUsername")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, username, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, username, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCredentials_HasEmailOrUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasEmailOrUsername'
type UserCredentials_HasEmailOrUsername_Call struct {
	*mock.Call
}

// HasEmailOrUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - email string
func (_e *UserCredentials_Expecter) HasEmailOrUsername(ctx interface{}, username interface{}, email interface{}) *UserCredentials_HasEmailOrUsername_Call {
	return &UserCredentials_HasEmailOrUsername_Call{Call: _e.mock.On("HasEmailOrUsername", ctx, username, email)}
}

func (_c *UserCredentials_HasEmailOrUsername_Call) Run(run func(ctx context.Context, username string, email string)) *UserCredentials_HasEmailOrUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserCredentials_HasEmailOrUsername_Call) Return(_a0 bool, _a1 error) *UserCredentials_HasEmailOrUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserCredentials_HasEmailOrUsername_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *UserCredentials_HasEmailOrUsername_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUser provides a mock function with given fields: ctx, username, salt, hash, email
func (_m *UserCredentials) InsertUser(ctx context.Context, username string, salt string, hash string, email string) (int, error) {
	ret := _m.Called(ctx, username, salt, hash, email)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (int, error)); ok {
		return rf(ctx, username, salt, hash, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) int); ok {
		r0 = rf(ctx, username, salt, hash, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, username, salt, hash, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCredentials_InsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUser'
type UserCredentials_InsertUser_Call struct {
	*mock.Call
}

// InsertUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - salt string
//   - hash string
//   - email string
func (_e *UserCredentials_Expecter) InsertUser(ctx interface{}, username interface{}, salt interface{}, hash interface{}, email interface{}) *UserCredentials_InsertUser_Call {
	return &UserCredentials_InsertUser_Call{Call: _e.mock.On("InsertUser", ctx, username, salt, hash, email)}
}

func (_c *UserCredentials_InsertUser_Call) Run(run func(ctx context.Context, username string, salt string, hash string, email string)) *UserCredentials_InsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *UserCredentials_InsertUser_Call) Return(_a0 int, _a1 error) *UserCredentials_InsertUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserCredentials_InsertUser_Call) RunAndReturn(run func(context.Context, string, string, string, string) (int, error)) *UserCredentials_InsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserCredentials creates a new instance of UserCredentials. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCredentials(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCredentials {
	mock := &UserCredentials{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
